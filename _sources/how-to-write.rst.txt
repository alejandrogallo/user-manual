============
How To Write
============


.. contents::



1 Engine
--------

1.1 Introduction
~~~~~~~~~~~~~~~~

This manual is written using the ```org-mode`` markup language <https://orgmode.html>`_.

You can find some cheatsheets for org's markup you can checkout

- `https://orgmode.html/quickstart.html <https://orgmode.html/quickstart.html>`_

- `http://xahlee.info/emacs/emacs/emacs_org_markup.html <http://xahlee.info/emacs/emacs/emacs_org_markup.html>`_

Additionally, org-mode's manual is found `here <https://orgmode.html/manual/>`_
and a **compact guide** is found `here <https://orgmode.html/guide/index.html>`_.

Please notice that for this manual to build you will need
a recent version of emacs, at least newer than **Emacs 27**.
You probably can install it from `the snapstore <https://snapcraft.io/emacs>`_ if you are using
a supported distribution.

1.1.1 Installing a minimal emacs version locally
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In case you are having some problems installing emacs
and you just want to get a minimal emacs version to build the pages,
consider adapting this script

.. code:: sh

    set -eu

    url="https://github.com/emacs-mirror/emacs/archive/refs/tags/emacs-28.0.90.tar.gz"

    mkdir -p ./emacs
    wget $url -O - | gunzip |  tar xvf - -C ./emacs --strip-components=1

    sudo apt-get install \
         libxml2-dev \
         gnutls-dev

    cd ./emacs

    ./autogen.sh
    ./configure \
        --with-x-toolkit=no \
        --with-xml2 \
        --with-xpm=ifavailable \
        --with-gif=ifavailable \
        --with-tiff=ifavailable \
        --with-gnutls=ifavailable

    make -j

This script installs on a debian-based system the library ``xml2`` and ``gnutls``
and downloads and builds emacs 28 in the current directory.

You can use this emacs binary by writing a ``config.mk`` file with the following contents

.. code:: make

    EMACS_BIN = ./emacs/src/emacs

1.2 Math
~~~~~~~~

Just use latex as if you were in latex


.. math::

    \int \sum


and you can also use equations



.. math::

    \label{eqseq}
    \hat{H} \psi = E \psi


and references work too \ref{eqseq}.

1.3 Links
~~~~~~~~~

org-mode has several types of links.

The equivalent to tex's

.. code:: tex

    \section{My section}
    \label{sec-my-section}

    My section~\ref{sec-my-section}

is

::

    * My section
    :PROPERTIES:
    :CUSTOM_ID: sec-my-section
    :END:

    My section [[#sec-my-section]]
    # or using org-ref's syntax
    My section [[ref:sec-my-section]]


Checkout some other example in the
`Hyperlinks (Org Mode Compact Guide) <https://orgmode.html/guide/Hyperlinks.html#Hyperlinks>`_ page.

Some important examples for us are

::

    [[file:algorithms/CoupledCluster/CoupledCluster.html::#maxiterations][maxIterations keyword]]

which links the heading ``maxiterations`` in the file ``CoupledCluster/CoupledCluster.html``
and gets rendered as `maxIterations keyword <algorithms/CoupledCluster/CoupledCluster.html>`_.

1.4 Bibliography
~~~~~~~~~~~~~~~~

In order to use a bibtex file in a page,
you have to add it with the

.. code:: org

    bibliography:group.bib
    # or
    bibliography:./path-to-your-bib-file.bib,other-file.bib

and add citations like ``cite:&yourcite``, for instance
(Al-Hamdani, Yasmine S and Rossi, Mariana and Alfe, Dario and Tsatsoulis, Theodoros and Ramberger, Benjamin and Brandenburg, J Gerit and Zen, Andrea and Kresse, Georg and Gr端neis, Andreas and Tkatchenko, Alexandre and others, 2017, Gr端neis, Andreas and Hirata, So and Ohnishi, Yu-ya and Ten-no, Seiichiro, 2017).


Here an example of the rendered bibliography of the citations made up here.

1.4.1 Literature
^^^^^^^^^^^^^^^^

Al-Hamdani, Yasmine S and Rossi, Mariana and Alfe, Dario and Tsatsoulis, Theodoros and Ramberger, Benjamin and Brandenburg, J Gerit and Zen, Andrea and Kresse, Georg and Gr端neis, Andreas and Tkatchenko, Alexandre and others (2017). *Properties of the water to boron nitride interaction: from zero to two dimensions with benchmark accuracy*, The Journal of Chemical Physics.

Gr端neis, Andreas and Hirata, So and Ohnishi, Yu-ya and Ten-no, Seiichiro (2017). *Perspective: Explicitly correlated electronic structure theory for complex systems*, The Journal of Chemical Physics.

1.4.2 More information
^^^^^^^^^^^^^^^^^^^^^^

You can find more information in videos like `this <https://www.youtube.com/watch?v=3u6eTSzHT6s>`_ by the
`org-ref <https://github.com/jkitchin/org-ref>`_ author.

1.5 Src blocks
~~~~~~~~~~~~~~

If you want to write some code blocks, the equivalent of markdown's

.. code:: markdown

    ```python
    def fun():
      pass
    ```

in org is

.. code:: org

    #+begin_src python
    def fun():
        pass
    #+end_src

and it renders like:

.. code:: python

    def fun():
        pass

2 Test locally
--------------

To build locally just make

.. code:: sh

    make publish

You can also serve the pages to simulate how they will be deployed
using

.. code:: sh

    make serve

and open the url in your browser `http://127.0.0.1:8888 <http://127.0.0.1:8888>`_.

You can also combine both by doing

.. code:: sh

    make publish serve

periodically and refreshing your browser.

3 Conventions
-------------

3.1 How to document an Object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In order to document an object, the following sections have to appear:

Brief description
    A brief description of what the object is and what it is commonly used for.
    Some further discussion of the object can be added here, for instance
    an example of an algorithm call to create the object or links to relevant
    algorithms.

Specification ``[Optional]``
    In the case of objects with a clear ``yaml`` specification, this should be explicitly
    provided here, see for instance the ``yaml`` specification of
    `GridVectors <objects/GridVectors.html>`_.

Literature ``[Optional]``
    If in the previous sections a literature citation has been used, then add this section
    to list the references.

3.2 How to document an Algorithm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following sections have to be provided:

Brief description
    A very brief description of what the algorithm is doing when called.
    Limit this description to a couple of lines.

Algorithm call
    An example of an algorithm call in ``yaml`` format.
    Optional parameters should have the following format in the sample

    .. code:: yaml

        # keyName: valueName    # optional

    For instance for `PerturbativeTriples <algorithms/PerturbativeTriples.html>`_

    .. code:: yaml

        - name: PerturbativeTriples
          in:
            coulombIntegrals: CoulombIntegrals
            amplitudes: Amplitudes
            slicedEigenEnergies: EigenEnergies
            # mp2PairEnergies: Mp2PairEnergies            # optional
          out:
            {}

Algorithm input
    Explanation of the inputs of the Algorithm.
    It should contain a table with two columns, **Keyword** and **Value**,
    e.g.

    .. table::

        +--------------------------------+-----------------------------------------------------------+
        | Keyword                        | Value                                                     |
        +================================+===========================================================+
        | ``coulombIntegrals``           | `Coulomb Integrals <objects/CoulombIntegrals.html>`_       |
        +--------------------------------+-----------------------------------------------------------+
        | ``mp2PairEnergies`` *optional* | `MP2 pair energies matrix <objects/Mp2PairEnergies.html>`_ |
        +--------------------------------+-----------------------------------------------------------+

    Optional inputs should be followed by an *optional* marker.
    The value field should be always a link to a detailed description
    of the input. If the value should be a commonly used object,
    it should be an ``id:`` like link to the corresponding object.
    Otherwise it can link to a section in the same document.

Algorithm output
    This section should include:

    - A table with the same format as for the input parameters for
      the output parameters.

    - A section with a sample ``stdout`` output of a succesful run
      of the algorithm

    - A section with the **relevant** ``yaml`` output of the algorithm.
      I.e., timings and flop count and so on needn't be included.

Computational complexity ``[Optional]``
    A discussion of the computational of the algorithm and some methods
    developed for it.

Theory ``[Optional]``
    A quick description of the theoretical background.
    If the method is well-known, refer to relevant articles.

Literature ``[Optional]``
    If in the previous sections a literature citation has been used, then add this section
    to list the references.
