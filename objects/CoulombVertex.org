:PROPERTIES:
:ID: CoulombVertex
:END:
#+title: CoulombVertex
# #+OPTIONS: toc:nil

* Brief description

$$ \tilde{\Gamma}^q_r({\bf G}) :=  \sqrt{\frac{4\pi}{{\bf G}^2}}   \int{\rm d}{\bf x}\,   {\rm e}^{-{\rm i}{\bf G}\cdot{\bf r}}\,   {\psi^\ast}^q({\bf x}) \psi_r({\bf x})\
$$

The =CoulombVertex= $\tilde{\Gamma}^q_r({\bf G})$ is computed from the co-density of an orbital pair
${\psi^\ast}^q({\bf x})$ and $\psi_r({\bf x})$, and the square-root of the Coulomb potential
$\sqrt{\frac{4\pi}{{\bf G}^2}}$.
Different representations of the =CoulombVertex= are possible using; for example,
singular-value-decomposition techniques as discussed in cite:&hummel2017low.
The transformation of the =CoulombVertex= into a truncated auxilliary field representation
reduces the memory footprint and is achieved using the
[[id:CoulombVertexSingularVectors][CoulombVertexSingularVectors]]
$\left({U^*}^G_F\right)$ :
$$
\Gamma^q_r({F}) = \sum_{\bf G}
  {U^*}^{\bf G}_F \tilde{\Gamma}^q_r({\bf G})
$$


The =CoulombVertex= needs to be provided by an interfaced electronic structure theory package
and can be read into =Cc4s= using the [[id:Read][Read]] algorithm.

#+begin_src yaml
- name: Read
  in:
    fileName: "CoulombVertex.yaml"
  out:
    tensor: CoulombVertex
#+end_src

* Specification

An example =CoulombVertex.yaml= file is given below

#+begin_src yaml
version: 100
type: Tensor
scalarType: Complex64
dimensions:
- length:    356
  type: AuxiliaryField
- length:     96
  type: State
- length:     96
  type: State
elements:
  type: IeeeBinaryFile
unit: 0.1917011272153577       # = sqrt(Eh/eV)
metaData:
  halfGrid: 1
#+end_src

* Literature
bibliography:../group.bib


