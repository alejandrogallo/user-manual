#+title: How To Write

* Engine
** Introduction
This manual is written using the [[https://orgmode.org][org-mode markup language]].

You can find some cheatsheets for org's markup you can checkout
- https://orgmode.org/quickstart.html
- http://xahlee.info/emacs/emacs/emacs_org_markup.html

Additionally, org-mode's manual is found [[https://orgmode.org/manual/][here]]
and a *compact guide* is found [[https://orgmode.org/guide/index.html][here]].

Please notice that for this manual to build you will need
a recent version of emacs, at least newer than *Emacs 27*.
You probably can install it from [[https://snapcraft.io/emacs][the snapstore]] if you are using
a supported distribution.

*** Installing a minimal emacs version locally

In case you are having some problems installing emacs
and you just want to get a minimal emacs version to build the pages,
consider adapting this script

#+begin_src sh :eval no
set -eu

url="https://github.com/emacs-mirror/emacs/archive/refs/tags/emacs-28.0.90.tar.gz"

mkdir -p ./emacs
wget $url -O - | gunzip |  tar xvf - -C ./emacs --strip-components=1

sudo apt-get install \
     libxml2-dev \
     gnutls-dev

cd ./emacs

./autogen.sh
./configure \
    --with-x-toolkit=no \
    --with-xml2 \
    --with-xpm=ifavailable \
    --with-gif=ifavailable \
    --with-tiff=ifavailable \
    --with-gnutls=ifavailable

make -j
#+end_src

This script installs on a debian-based system the library =xml2= and =gnutls=
and downloads and builds emacs 28 in the current directory.

You can use this emacs binary by writing a =config.mk= file with the following contents

#+begin_src make
EMACS_BIN = ./emacs/src/emacs
#+end_src



** Math
Just use latex as if you were in latex
$$\int \sum$$
and you can also use equations

$$
\label{eqseq}
\hat{H} \psi = E \psi
$$
and references work too \ref{eqseq}.

** Links
org-mode has several types of links.

The equivalent to tex's
#+begin_src tex
\section{My section}
\label{sec-my-section}

My section~\ref{sec-my-section}
#+end_src

is

#+begin_example
,* My section
:PROPERTIES:
:CUSTOM_ID: sec-my-section
:END:

My section [[#sec-my-section]]
# or using org-ref's syntax
My section [[ref:sec-my-section]]
#+end_example


Checkout some other example in the
[[https://orgmode.org/guide/Hyperlinks.html#Hyperlinks][Hyperlinks (Org Mode Compact Guide)]] page.

Some important examples for us are

#+begin_example
[[file:algorithms/CoupledCluster/CoupledCluster.org::#maxiterations][maxIterations keyword]]
#+end_example

which links the heading =maxiterations= in the file =CoupledCluster/CoupledCluster.org=
and gets rendered as [[file:algorithms/CoupledCluster/CoupledCluster.org::#maxiterations][maxIterations keyword]].




** Bibliography

In order to use a bibtex file in a page,
you have to add it with the
#+begin_src org
bibliography:group.bib
# or
bibliography:./path-to-your-bib-file.bib,other-file.bib
#+end_src

and add citations like =cite:&yourcite=, for instance
[cite:@al2017properties;@gruneis2017perspective].


Here an example of the rendered bibliography of the citations made up here.
*** Literature
#+print_bibliography:
*** More information
You can find more information in videos like [[https://www.youtube.com/watch?v=3u6eTSzHT6s][this]] by the
[[https://github.com/jkitchin/org-ref][org-ref]] author.


** Src blocks
If you want to write some code blocks, the equivalent of markdown's
#+begin_src markdown
```python
def fun():
  pass
```
#+end_src
in org is
#+begin_src org
,#+begin_src python
def fun():
    pass
,#+end_src
#+end_src

and it renders like:

#+begin_src python
def fun():
    pass
#+end_src


* Test locally

To build locally just make
#+begin_src sh
make publish
#+end_src

You can also serve the pages to simulate how they will be deployed
using
#+begin_src sh
make serve
#+end_src
and open the url in your browser http://127.0.0.1:8888.

You can also combine both by doing
#+begin_src sh
make publish serve
#+end_src
periodically and refreshing your browser.

* Conventions

** How to document an Object
In order to document an object, the following sections have to appear:

- Brief description ::
  A brief description of what the object is and what it is commonly used for.
  Some further discussion of the object can be added here, for instance
  an example of an algorithm call to create the object or links to relevant
  algorithms.
- Specification =[Optional]= ::
  In the case of objects with a clear =yaml= specification, this should be explicitly
  provided here, see for instance the =yaml= specification of
  [[id:GridVectors][GridVectors]].
- Literature =[Optional]= ::
  If in the previous sections a literature citation has been used, then add this section
  to list the references.

** How to document an Algorithm
The following sections have to be provided:

- Brief description ::
  A very brief description of what the algorithm is doing when called.
  Limit this description to a couple of lines.
- Algorithm call ::
  An example of an algorithm call in =yaml= format.
  Optional parameters should have the following format in the sample
  #+begin_src yaml
  # keyName: valueName    # optional
  #+end_src
  For instance for [[id:PerturbativeTriples][PerturbativeTriples]]
  #+begin_src yaml
  - name: PerturbativeTriples
    in:
      coulombIntegrals: CoulombIntegrals
      amplitudes: Amplitudes
      slicedEigenEnergies: EigenEnergies
      # mp2PairEnergies: Mp2PairEnergies            # optional
    out:
      {}
  #+end_src
- Algorithm input ::
  Explanation of the inputs of the Algorithm.
  It should contain a table with two columns, *Keyword* and *Value*,
  e.g.
  | Keyword                      | Value                    |
  |------------------------------+--------------------------|
  | =coulombIntegrals=           | [[id:CoulombIntegrals][Coulomb Integrals]]        |
  | =mp2PairEnergies= /optional/ | [[id:Mp2PairEnergies][MP2 pair energies matrix]] |
  Optional inputs should be followed by an /optional/ marker.
  The value field should be always a link to a detailed description
  of the input. If the value should be a commonly used object,
  it should be an =id:= like link to the corresponding object.
  Otherwise it can link to a section in the same document.
- Algorithm output ::
  This section should include:
  - A table with the same format as for the input parameters for
    the output parameters.
  - A section with a sample =stdout= output of a succesful run
    of the algorithm
  - A section with the *relevant* =yaml= output of the algorithm.
    I.e., timings and flop count and so on needn't be included.
- Computational complexity =[Optional]= ::
  A discussion of the computational of the algorithm and some methods
  developed for it.
- Theory =[Optional]= :: A quick description of the theoretical background.
  If the method is well-known, refer to relevant articles.
- Literature =[Optional]= ::
  If in the previous sections a literature citation has been used, then add this section
  to list the references.
