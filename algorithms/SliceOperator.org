:PROPERTIES:
:ID: SliceOperator
:END:
#+title: SliceOperator
# #+OPTIONS: toc:nil

* Brief description
This algorithm splits all edges of an input tensor of type orbital and size $N_p$
in sizes of $N_o$ and $N_v$. It uses =slicedEigenEnergies= to identify
the number of holes $N_o$ and particles $N_v$. The output tensor will be a set of
$2^n$ tensors, where n is the number of edges with type orbital. For instance
the Coulomb Vertex will be processed like
$\Gamma_p^p(G) \rightarrow \{ \Gamma_o^o(G), \Gamma_o^v(G), \Gamma_v^o(G), \Gamma_v^v(G)\}$.

* Algorithm call

A typical input file snippet to call the [[id:SliceOperator][SliceOperator]]
algorithm is given below.

#+begin_src yaml
- name: SliceOperator
  in:
    slicedEigenEnergies: EigenEnergies
    operator: CoulombVertex
  out:
    slicedOperator: CoulombVertex
#+end_src


* Algorithm input

# +caption: Input keywords
#+name: sliceop-input-table
| Keyword               | Value |
|-----------------------+-------|
| =operator=            | [[#operator][Operator]]      |
| =slicedEigenEnergies= | [[id:SlicedEigenEnergies][SlicedEigenEnergies]]      |
|-----------------------+-------|

** operator
:PROPERTIES:
:CUSTOM_ID: operator
:END:

This is a single tensor.

* Algorithm output
#+name: sliceop-output-table
| Keyword          | Value |
|------------------+-------|
| =slicedOperator= | [[#slicedOperator][SlicedOperator]]      |
|------------------+-------|

** slicedOperator
:PROPERTIES:
:CUSTOM_ID: slicedOperator
:END:

This is a set of tensors.

** Sample =stdout=
The output of this algorithm reads
#+begin_src sh
step: 4, SliceOperator
Slicing CoulombVertex.elements into holes and particles.
realtime 0.000798066 s
#+end_src

** Sample =yaml= output

#+begin_src yaml
floatingPointOperations: 0
flops: 0
in:
  operator: 0x24878e8
  slicedEigenEnergies: 0x2487f38
name: SliceOperator
out:
  slicedOperator: 0x24aee28
realtime: 0.002082513
#+end_src

* Literature
bibliography:../group.bib


