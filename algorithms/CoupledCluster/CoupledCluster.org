#+title: CoupledCluster


* CoupledCluster algorithm

** Input

A typical input to call the CoupledCluster algorithm is given below.

#+begin_src sh
- name: CoupledCluster
  in:
    method:
      type: Ccsd
    slicedEigenEnergies: EigenEnergies
    coulombIntegrals: CoulombIntegrals
    slicedCoulombVertex: CoulombVertex
    integralsSliceSize: 100
    maxIterations: 20
    energyConvergence: 1.0E-4
    amplitudesConvergence: 1.0E-4
    mixer:
      type: DiisMixer
      maxResidua: 5
  out:
    energy: CcsdEnergy
    amplitudes: Amplitudes
#+end_src

=method: type:= specifies the  coupled-cluster approximation for the amplitudes to be used.
The =Ccsd= or =Drccd= approximation are currently avaible. 

=slicedEigenEnergies=, =coulombIntegrals= and =slicedCoulombVertex= require input tensors
corresponding to one-electron Hartree--Fock energies $\epsilon_p$, two-electron
integrals $V_{pq}^{rs}$ and the CoulombVertex $\Gamma_{pG}^r$, respectively.
The latter is used to compute two-electron integrals $V_{cd}^{ab}$ on-the-fly.
=CoulombIntegrals= is an output generated by the =VertexCoulombIntegrals= algorithm. TODO:add links to algorithms.
=EigenEnergies= is an output generated by the =DefineHolesAndParticles= algorithm.
=CoulombVertex= is an output generated by the =SliceOperator= algorithm.

=integralsSliceSize= controls the slice-size of the $V_{cd}^{ab}$ integrals, which are computed on-the-fly to
reduce the memory footprint. The integer value specified for =integralsSliceSize=  refers to the dimension size
used for the $a$ and $b$ index. We recommend setting =integralsSliceSize: 100= to balance
computational efficency with memory usage. Smaller/larger values reduce/increase the memory footprint.

=maxIterations= controls the maximum number of iterations allowed to solve the  $t_{ij}^{ab}$ and $t_i^a$ amplitude equations.
If convergence of the energy and residual vectors within the specified thresholds is achieved using fewer iterations
than =maxIterations=, the algorithm will stop.
If =maxIterations= is reached without achieving =energyConvergence= and =amplitudesConvergence= , the algorithm was not
successful and will stop. We recommend to set =maxIterations: 20=, which is ususally enough to achieve reasonable convergence
thresholds.

=energyConvergence= specifies the convergence threshold for the correlation energy.
=amplitudesConvergence= specifies the convergence threshold for the residual vector of the singles and doubles amplitude equations.
If =energyConvergence= and =amplitudesConvergence= is achieved, the iterative solution was successful and the algorithm will stop.

=mixer:= specifies mixer-specific parameters used to solve the amplitude equations iteratively.
The direct inversion iterative subspace (Diis) algorithm is the default algorithm used to mix amplitude guesses from previous
iterations to improve the guess for the next iteration.
=mixer: type:= can currently be set to =DiisMixer= or =LinearMixer=.

For =mixer: type: DissMixer=, it is possible to specify =mixer: maxResidua:=, which controls the number of residual
vectors used by the Diis algorithm.
We recommend to set the maximum number of residual vectors used in the =DiisMixer= to =5=.
More residual vectors result in a larger memory footprint.

For =mixer: type: LinearMixer= it is possible to specify =mixer: ratio:=, which controls the mixing ratio used
to update the new guess of the amplitudes based on estimates from the previous and current iteration.
The =LinearMixer= exhibits the smallest possible memory footprint from all currently available mixers,
keeping two sets of amplitudes in memory at once only.
We recommend to set =mixer: ratio: 1.0=. Smaller ratios result in a slower but perhaps more stable convergence.

** Output

The output of the CoupledCluster algorithm includes =energy:= and =amplitudes:= . The =amplitudes= output contains
the converged singles and doubles amplitude tensors. The amplitudes can be used as input for algorithms
that estimate the finite simulation cell size error (=TransitionStructureFactorFiniteSizeCorrection=)
and the basis set incompleteness errors (=CcsdFocalPointBasisSetCorrection=).

** Theory

This algorithm solves the coupled-cluster amplitude equations.
TODO: add short description and refs

** Computational Complexity and memory footprint

*** =method: type: Ccsd= algorithm
The computational bottle neck of the =Ccsd= algorithm originates in most calculations from the following expression, which is
part of the doubles amplitude equations: $V_{cd}^{ab} t_{ij}^{cd}$. The computational cost of evaluating this expression scales
as $\mathcal{O}(N_{\rm o}^2 N_{\rm v}^4)$. To avoid a memory footprint of $\mathcal{O}(N_{\rm v}^4)$ from storing
$V_{cd}^{ab}$, only slices of $V_{cd}^{xy}$ are computed on-the-fly and used in the contraction, reducing
the corresponding memory footprint to $\mathcal{O}(N_{\rm v}^2 N_{\rm s}^2)$, where $N_{\rm s}$ is controlled using 
the =integralsSliceSize= keyword.

*** =method: type: Drccd= algorithm
TODO: add short info about Drccd
