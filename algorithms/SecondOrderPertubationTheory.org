:PROPERTIES:
:ID: SecondOrderPerturbationTheory
:END:
#+title: =SecondOrderPerturbationTheory=
# #+OPTIONS: toc:nil

* Example =Cc4s= input

A typical input file snippet to call the =SecondOrderPerturbationTheory= algorithm is given below.

#+begin_src yaml
- name: SecondOrderPerturbationTheory
  in:
    coulombIntegrals: CoulombIntegrals
    slicedEigenEnergies: EigenEnergies
  out:
    energy:
#+end_src


* Input Description

#+caption: Input keywords for PerturbativeTriples
| Input Keyword         | Description                    | Default |
|-----------------------+--------------------------------+---------|
| =coulombIntegrals=    | [[id:CoulombIntegrals][Coulomb Integrals]]              |         |
| =slicedEigenEnergies= | [[id:SlicedEigenEnergies][Sliced one-electron energies]]   |         |


* Output

Below an example standard output stream is shown for a successful =SecondOrderPerturbationTheory= algorithm run


#+begin_src sh
step: 9, SecondOrderPerturbationTheory
Contracting second order energy...
correlation energy: -24.3605
  singles:  0
  direct:   -35.3032
  exchange: 10.9427
realtime 0.170357500 s
--
#+end_src

* Computational Complexity and memory footprint
Two objects of size $\mathcal{O}{(N_\mathrm{o}^2 N_\mathrm{v}^2)}$ are stored in main memory. The computational complexity should be negligible as is of order $\mathcal{O}{(N_o^2 N_v^2)}$.

* Theory
The implemented expression assumes Hartree--Fock one-electron energies and can be found in Ref.[[cite:&Moller]].

* Literature
bibliography:../group.bib
