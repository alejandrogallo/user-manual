:PROPERTIES:
:ID: CoupledCluster
:END:
#+title: =CoupledCluster=
# #+OPTIONS: toc:nil

* Brief description
This algorithm solves the CCSD amplitude equations using the Coulomb integrals
and Hartree--Fock eigenenergies.

* Algorithm call

A typical input file snippet to call the =CoupledCluster= algorithm is given below.
#+begin_src yaml :noweb yes
- name: CoupledCluster
  in:
    method: Ccsd
    integralsSliceSize: 100
    slicedEigenEnergies: EigenEnergies
    coulombIntegrals: CoulombIntegrals
    slicedCoulombVertex: CoulombVertex
    maxIterations: 20
    energyConvergence: 1.0E-4
    amplitudesConvergence: 1.0E-4
    mixer:
      type: DiisMixer
      maxResidua: 5
    #or for instance a linear mixer
    #mixer:
    #  type: LinearMixer
    #  ratio: 1.0
  out:
    amplitudes: Amplitudes
#+end_src

* Algorithm input

#+caption: Input keywords
#+name: ccsd-input-table
| Keyword                      | Value                             |
|------------------------------+-----------------------------------|
| =method=                     | [[#method][Type of coupled cluster algorithm]] |
| =linearized=                 | [[#linearized][Use linearized or fully non-linear coupled cluster]] |
| =integralsSliceSize=         | [[#integralsslicesize][Integral slice size]]               |
| =slicedEigenEnergies=        | [[id:SlicedEigenEnergies][Sliced one-electron energies]]      |
| =coulombIntegrals=           | [[id:CoulombIntegrals][Coulomb Integrals]]                 |
| =slicedCoulombVertex=        | [[id:SlicedCoulombVertex][Sliced Coulomb vertex]]             |
| =maxIterations=              | [[#maxiterations][Maximum number of iterations]]      |
| =energyConvergence=          | [[#energyconvergence][Energy convergence threshold]]      |
| =amplitudesConvergence=      | [[#amplitudesconvergence][Amplitude convergence threshold]]   |
| =mixer=                      | [[#mixer][Mixer type and parameters]]                        |
|------------------------------+-----------------------------------|

** method
:PROPERTIES:
:CUSTOM_ID: method
:END:
=method= specifies the  coupled-cluster approximation for the amplitudes to be used.
The currently available approximations are:
  - =Ccsd= :: Coupled Cluster singles and doubles (see [[cite:&Bartlett2007-cm]] and references therin).
  - =CcsdReference= :: Canonical and unoptimized version of the =Ccsd= algorithm.
    This algorithm has the same inputs as =Ccsd= with the exception that the
    arguments
    [[#integralsslicesize][integralSliceSize]] and
    [[id:SlicedCoulombVertex][slicedCoulombVertex]] and
    are ignored.
  - =Drccsd= :: Unoptimized implementation of Direct-Ring Coupled Cluster
    singles and doubles [[cite:&freeman_coupled-cluster_1977]]
    [[cite:&paier2012assessment]].

** linearzied
:PROPERTIES:
:CUSTOM_ID: linearized
:END:
=linearized= A non-zero value indicates that the linearized
coupled-cluster amplitude equations should be solved, rather
than the fully non-linear ones.
The default is =linearized: 0=.
Note: currently only =method: Drccd= supports linearized
amplitude equations.

** integralsSliceSize
:PROPERTIES:
:CUSTOM_ID: integralsslicesize
:END:

=integralsSliceSize= controls the slice size of the $V_{cd}^{ab}$ integrals, which are computed on-the-fly to
reduce the memory footprint. The integer value specified for =integralsSliceSize=  refers to the dimension size
used for the $a$ and $b$ index. We recommend setting =integralsSliceSize: 100= to balance
computational efficency with memory usage. Smaller/larger values reduce/increase the memory footprint.

** maxIterations
:PROPERTIES:
:CUSTOM_ID: maxiterations
:END:

=maxIterations= controls the maximum number of iterations allowed to solve the  $t_{ij}^{ab}$ and $t_i^a$ amplitude equations.
If convergence of the energy and residual vectors within the specified thresholds is achieved using fewer iterations
than =maxIterations=, the algorithm was successfull and will stop.
If =maxIterations= is reached without achieving =energyConvergence= and =amplitudesConvergence= , the algorithm was not
successful and will stop. We recommend to set =maxIterations: 20=, which is ususally enough to achieve reasonable convergence
thresholds.

** energyConvergence
:PROPERTIES:
:CUSTOM_ID: energyconvergence
:END:

=energyConvergence= specifies the convergence threshold for the correlation energy.
If =energyConvergence= and =amplitudesConvergence= is achieved, the iterative solution was successful and the algorithm will stop.

** amplitudesConvergence
:PROPERTIES:
:CUSTOM_ID: amplitudesconvergence
:END:

=amplitudesConvergence= specifies the convergence threshold for the residual vector of the singles and doubles amplitude equations.
If =energyConvergence= and =amplitudesConvergence= is achieved, the iterative solution was successful and the algorithm will stop.

** mixer
:PROPERTIES:
:CUSTOM_ID: mixer
:END:

=mixer= specifies mixer-specific parameters used to solve the amplitude equations iteratively.
The direct inversion iterative subspace (Diis) algorithm is the default algorithm used to mix amplitude guesses from previous
iterations to improve the guess for the next iteration.
=mixer: type= can currently be set to =*DiisMixer= or =*LinearMixer=.

*** DiisMixer
For =mixer: type: DissMixer=, it is possible to specify =mixer: maxResidua=, which controls the number of residual
vectors used by the Diis mixer.
We recommend to set the maximum number of residual vectors used in the =DiisMixer= to =5=.
More residual vectors result in a larger memory footprint.

- Example ::
#+begin_src yaml
mixer:
  type: DiisMixer
  maxResidua: 5
#+end_src


*** LinearMixer

For =mixer: type: LinearMixer= it is possible to specify =mixer: ratio=, which controls the mixing ratio used
to update the new guess of the amplitudes based on estimates from the previous and current iteration.
The =LinearMixer= exhibits the smallest possible memory footprint from all currently available mixers,
keeping two sets of amplitudes in memory at once only.
We recommend to set =mixer: ratio: 1.0=. Smaller ratios result in a slower but perhaps more stable convergence.

- Example ::
#+name: linear-mixer-example
#+begin_src yaml
mixer:
  type: LinearMixer
  ratio: 1.0
#+end_src

* Algorithm output

#+caption: Output keywords for CoupledCluster
#+name: ccsd-output-table
| Keyword      | Value      |
|--------------+------------|
| =amplitudes= | [[id:Amplitudes][Amplitudes]] |
|--------------+------------|

The output of the *CoupledCluster* algorithm includes =energy= and =amplitudes= . The =amplitudes= output contains
the converged singles and doubles amplitude tensors. The amplitudes can be used as input for algorithms
that estimate the finite simulation cell size error (*FiniteSizeCorrection*)
and the basis set incompleteness errors (*BasisSetCorrection*).

** Sample =stdout=
Below an example standard output stream is shown for a successful *CoupledCluster* algorithm run.
#+begin_src sh
step: 6, CoupledCluster
Using method Ccsd. integralsSliceSize: 100
Using mixer DiisMixer. maxResidua: 5
Maximum number of iterations: 30
Unless reaching energy convergence dE: 1e-05
and amplitudes convergence dR: 1e-05
Iter         Energy         dE           dR         time   GF/s/core
   1  -2.43605043e+01  -2.4361e+01   4.3924e-01      0.5    1.0
   2  -2.47577534e+01  -3.9725e-01   7.4733e-02      0.8    4.8
   3  -2.53776918e+01  -6.1994e-01   1.8674e-02      0.7    5.4
   4  -2.54455925e+01  -6.7901e-02   6.4132e-03      0.7    5.5
   5  -2.54445080e+01   1.0845e-03   2.2120e-03      0.7    5.4
   6  -2.54458312e+01  -1.3232e-03   1.0304e-03      0.7    5.4
   7  -2.54448941e+01   9.3705e-04   5.0727e-04      0.7    5.4
   8  -2.54452894e+01  -3.9521e-04   1.9694e-04      0.7    5.4
   9  -2.54454262e+01  -1.3682e-04   7.7180e-05      0.7    5.4
  10  -2.54455328e+01  -1.0663e-04   3.0247e-05      0.7    5.4
  11  -2.54455929e+01  -6.0110e-05   1.1758e-05      0.7    5.4
  12  -2.54456151e+01  -2.2218e-05   5.0053e-06      0.7    5.4
  13  -2.54456249e+01  -9.7454e-06   2.2689e-06      0.7    5.4

Ccsd correlation energy:          -25.4456248862
2nd-order correlation energy:     -24.3605043096
realtime 9.189542891 s
--
#+end_src

* Sample =yaml= output

Below an example =yaml= output stream is shown for a successful *CoupledCluster* algorithm run.

#+begin_src yaml
name: CoupledCluster
out:
  amplitudes: 0x26e4758
  convergenceReached: 1
  energy:
    correlation: -25.445624886202758
    direct: -38.822491455744313
    exchange: 13.376866569541555
    secondOrder: -24.360504309639897
    unit: 0.036749322175638782
realtime: 9.189542891
#+end_src



* Computational complexity

This section explains computational or memory footprints
for the various methods implemented in *CoupledCluster*
[[#method][(see method)]].

** =Ccsd method=
The computational bottle neck of a typical Ccsd calculation originates from the following contraction, which is
part of the doubles amplitude equations: $V_{cd}^{ab} t_{ij}^{cd}$. The computational cost for evaluating this expression scales
as $\mathcal{O}(N_{\rm o}^2 N_{\rm v}^4)$. To avoid a memory footprint of $\mathcal{O}(N_{\rm v}^4)$ in storing
$V_{cd}^{ab}$, slices $V_{cd}^{xy}$ are computed on-the-fly and used in the contraction, reducing
the corresponding memory footprint to $\mathcal{O}(N_{\rm v}^2 N_{\rm s}^2)$, where $N_{\rm s}$ is controlled using
the =integralsSliceSize= keyword.

We note that required storage of a set of doubles amplitudes adds substantially to the memory footprint in Ccsd calculations.
The Diis algorithm requires the storage of both doubles residua and amplitudes =maxResidua= times. We recommend to choose the
type of mixer and its parameters carefully to reduce the memory footprint if necessary.

** =Drccd method=
The computational complexity is $\mathcal O(N_\mathrm{o}^3N_\mathrm{v}^3)$.
The implementation is not optimized for large systems. The memory requirement
scales as $\mathcal O(N_\mathrm{o} N_\mathrm{v})$ 

* Theory

We recommend the following review article and references therein to get started with coupled-cluster theory cite:&Bartlett2007-cm .

* Literature
bibliography:../group.bib


