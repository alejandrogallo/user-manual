:PROPERTIES:
:ID: VaspInterface
:END:
#+title: Description of =VASP= interface to =Cc4s=


Here we describe how to use the Vienna Ab initio Simulation Package (=VASP=) to generate data files that are needed by =Cc4s= to perform post-Hartree--Fock calculations.
This page explains the =VASP= work flow to calculate occupied and unoccupied one-electron Hartree-Fock orbitals, as well as all necessary input files for =Cc4s=.
Basic knowledge with VASP is assumed.
In addition, we also refer to the [[https://www.vasp.at/wiki][Wiki page of VASP]].


*The example of solid boron nitride*

We use an 8 atom supercell (=POSCAR= file) of the cubic phase of solid boron nitride as an example. The corresponding =POSCAR= file is given below.

#+name: cBN-poscar
#+begin_src sh
cBN
3.615
1.000 0.000 0.000
0.000 1.000 0.000
0.000 0.000 1.000
4 4
direct
0.000 0.000 0.000
0.500 0.500 0.000
0.000 0.500 0.500
0.500 0.000 0.500
0.250 0.250 0.250
0.750 0.750 0.250
0.250 0.750 0.750
0.750 0.250 0.750
#+end_src

We choose a $\Gamma$-point only sampling of the Brillouine zone, employing the following =KPOINTS= file

#+name: kpoints
#+begin_src sh
k-mesh
0
gamma
1 1 1
#+end_src

Make sure that a correctly merged =POTCAR= file is available in your working directory for boron (N) and nitrogen (N): e.g. =B_GW/POTCAR= and =N_GW_new/POTCAR= from the folder of your VASP copy. 


# Essentially, 
# 1. Grundzustand
# 2. Virtuelle Orbitale
# 3. Natural orbitals
# 4. Low-rank
# 5. Output files for cc4s


* *Step 1* Hartree-Fock: Occupied orbitals

We initialize the Hartree-Fock (HF) step by a preceding DFT (density functional theory) ground state calculation using the following =INCAR= file. 
The individual flags will be explained below.

#+name: dft-incar
#+begin_src sh
ENCUT   = $encut
NCORE   = $ncore
ISMEAR  = 0
SIGMA   = 0.001
#+end_src

Although not essential, the DFT preparation usually increases the stability of the subsequent HF iteration procedure in =VASP=.
The produced =WAVECAR= file is then read in the HF step for which we use the following =INCAR= file.

#+name: hf-incar
#+begin_src sh
ENCUT   = $encut
NCORE   = $ncore
ISMEAR  = 0
SIGMA   = 0.001

ALGO    = A
EDIFF   = 1E-7
LHFCALC = T
AEXX    = 1.0
#+end_src

The tag =ENCUT= defines the plane-wave basis set size by a kinetic energy cutoff in eV. 
It is advisable to set =ENCUT= to a value which is at least 20% larger than the largest =ENMAX= entry in the =POTCAR= file.
We therefore choose =ENCUT=550=.
For optimal performance on multi-core machines set =NCORE= to the number of cores per socket. 
The =ISMEAR= and =SIGMA= ensure integer occupancies of the one-electron orbitals and can safely be used for all insulating systems with a finite band gap.
We recommend to use the conjugated gradient algorithm for the iterative HF procedure by setting =ALGO=A=.
For properly converged Hartree--Fock orbital energies, we choose a break condition of $10^{-7}\,\text{eV}$ by setting =EDIFF=1E-7=.
Further information on the used tags can be found in the VASP wiki.


* *Step 2* Hartree-Fock: Unoccupied orbitals

Coupled cluster theory approximates the many-electron wave function using excited Slater determinants contructed from occupied and unoccupied orbitals.
We compute all unoccupied HF orbitals in the given plane-wave basis as described below.
The total number of HF orbitals/bands is equal to the number of plane-waves and can be found in the OUTCAR of the HF ground state calculation in the following way.

#+name: nbands
#+begin_src sh
#nbands=`awk '/number of plane-waves:/ {print $5} ' < OUTCAR # OUTCAR file from HF ground state calculation using complex code
nbands=`awk '/number of plane-waves:/ {print $5*2 -1} ' < OUTCAR # OUTCAR file from HF ground state calculation using gamma-only code
#+end_src

Please note, that =VASP= automatically adjusts the number of bands to be a multiple of the number of MPI ranks in =VASP= calculations for reasons of parallelization.
Additionally, a factor of 2 has to be included in the gamma-only code version of VASP.

Ensure that the =WAVECAR= contains all converged occupied HF orbitals as described above and use the following =INCAR= file to calculate the unoccupied HF orbitals:

#+name: hfv-incar
#+begin_src sh
ENCUT   = $encut
NCORE   = $ncore
ISMEAR  = 0
SIGMA   = 0.001

ALGO    = Exact
LHFCALC = T
AEXX    = 1.0
NBANDS  = $nbands
NELM    = 1
#+end_src

Here, an exact diagonalisation (=ALGO=Exact=) of the Fock matrix with dimension =$nbands \times $nbands= is performed.
This is a single-shot step, $i.e.$ no iterations are necessary: =NELM=1=.
Save the =WAVECAR= file containing all unoccupied (virtual) orbitals, e.g. =mv WAVECAR WAVECAR.HFV=.

* *Optional Step 2-(a)*: MP2 for focal-point basis-set correction

For the [[id:CcsdFocalPointBasisSetCorrection][CcsdFocalPointBasisSetCorrection]] algorithm the [[id:Mp2PairEnergies][MP2 pair energies matrix]]
is needed. This input file can be obtained along with the MP2 correlation energy in the complete basis set limit using an automated extrapolation procedure
by runnning the following =VASP= calculation.
Make sure to employ the =WAVECAR= files from the previous calculation (=WAVECAR.HFV=) that contains all orbitals.
The MP2 calculation can be performed using the following =INCAR= file.

#+name: mp2-incar
#+begin_src sh
ENCUT   = $encut
ISMEAR  = 0
SIGMA   = 0.001
ISYM=-1

ALGO    = MP2
LHFCALC = .TRUE.
AEXX    = 1.0
NBANDS  = $nbands
LSFACTOR=.TRUE.
#+end_src

At the end of this =VASP= calculation the *Mp2PairEnergies.yaml* and *Mp2PairEnergies.dat* files will be written to disk.

* *Optional Step 2-(b)*: Approximate natural orbitals

The convergence of the electronic correlation energy is very slow when using canonical Hartree--Fock orbitals.
Approximate natural orbitals allow for achieving a more rapid correlation energy convergence to the complete basis set limit.
Here, we compute these natural orbitals as described below. However, alternative approaches such as =ALGO=RPANO= exist in =VASP=.
Make sure to employ the =WAVECAR= file containing all orbitals (=WAVECAR.HFV=).

#+name: hfv-incar
#+begin_src sh
ENCUT   = $encut
ISMEAR  = 0
SIGMA   = 0.001
ISYM=-1

ALGO    = MP2NO
LHFCALC = .TRUE.
AEXX    = 1.0
NBANDS  = $nbands
LAPPROX = .TRUE.
#+end_src

This =VASP= calculation will produce the =WAVECAR.FNO= file containing all unoccupied natural orbitals.
We choose to work with a small subset of these natural orbitals. We recommend to use 10 unoccupied natural orbitals per occupied orbital in combination with the
[[id:CcsdFocalPointBasisSetCorrection][CcsdFocalPointBasisSetCorrection]] algorithm of =Cc4s=. The corresponding number of orbitals can be obtained
using the following command.

#+begin_src sh
nbands=`awk <OUTCAR "/NELEC/ { print \\$3/2 * 11 }"`
#+end_src

All =Cc4s= algorithms are currently based on canonical formulations.
To this end we need to re-canonicalize the subset of natural orbitals by performing another =VASP= calculation.
Make sure to use the =WAVECAR.FNO= file as input, =cp WAVECAR.FNO WAVECAR= and employ the following =INCAR= file.

#+name: hfno-incar
#+begin_src sh
ENCUT   = $encut
NCORE   = $ncore
ISMEAR  = 0
SIGMA   = 0.001

ALGO    = sub
LHFCALC = T
AEXX    = 1.0
NBANDS  = $nbands
NBANDSHIGH  = $nbands
NELM    = 1
#+end_src

The =NBANDSHIGH= tag makes sure that exactly the number of orbitals specified by =NBANDS= will be used regardless of the number of MPI ranks.
Save the =WAVECAR= file containing the re-canonicalized unoccupied natural orbitals, e.g. =mv WAVECAR WAVECAR.CNO=.

* *Step 3* Computing =Cc4s= input files

In the final step we call =VASP= using the =WAVECAR= file with the desired choice of unoccupied orbitals (e.g. =cp WAVECAR.HFV WAVECAR= or =cp WAVECAR.CNO WAVECAR=)

#+name: ftoddump-incar
#+begin_src sh
ENCUT   = $encut
NCORE   = $ncore
ISMEAR  = 0
SIGMA   = 0.001

ALGO        = CC4S
EDIFF       = 1E-5
NBANDS      = $nbands
NBANDSHIGH  = $nbands
PRECFOCK    = Normal
ENCUTGW     = $encutgw
ENCUTGWSOFT = $encutgw
ISYM        = -1
#+end_src


This step produces the following input files needed by =Cc4s= 

- [[id:EigenEnergies][Eigenenergies]] ($\epsilon_{p}$) : =EigenEnergies.yaml=, =EigenEnergies.dat=
- [[id:CoulombVertex][CoulombVertex]] ($\Gamma^{pG}_{q}$) :  =CoulombVertex.yaml=, =CoulombVertex.dat=
- [[id:GridVectors][GridVectors]] ($\vec G$) : =GridVectors.yaml=, =GridVectors.dat=
- [[id:CoulombPotential][CoulombPotential]] ($V(\vec G)$) : =CoulombPotential.yaml=, =CoulombPotential.dat=
- [[id:DeltaIntegrals][DeltaIntegrals]] ($\delta^{ab}_{ij}$) : =DeltaPPHH.yaml=, =DeltaPPHH.dat=
- [[id:DeltaIntegrals][DeltaIntegrals]] ($\delta_{ij}$) : =DeltaHH.yaml=, =DeltaHH.dat=
- [[id:CoulombVertexSingularVectors][CoulombVertexSingularVetors]] ($U_{G}^{F}$) : =CoulombVertexSingularVectors.yaml=, =CoulombVertexSingularVectors.dat=


